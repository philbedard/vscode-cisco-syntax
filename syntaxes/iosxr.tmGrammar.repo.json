{
  "scopeName": "text.iosxr",
  "fileTypes": [
    "xr", 
    "iosxr", 
    "cfg"
  ],
  "firstLineMatch": "^!!\\s+IOS\\s+XR.*", 
  "firstLine": "^!!\\s+IOS\\s+XR.*", 
  "foldingStartMarker": "^route-policy|^interface|^router|^ip access-list extended|^telemetry|^ptp|^segment-routing",
  "foldingStopMarker": "^!",
  "name": "cisco-iosxr",
  "repository": { 
      "comments": { 
        "patterns": [ 
            {
            "match": "\\b(description|remark|system message)\\s.*$",
            "name": "comment.documentation.iosxr"
            },
            {
            "match": "^!!",
            "name": "comment.iosxr"
            }
        ]
    }, 
      "acl": { 
        "patterns": [ 
            {
            "match": "^((ipv4|ipv6) access-list)\\s(.*$)",
            "captures": { 
                "1": { "name": "support.function.acl.iosxr"}, 
                "3": { "name": "invalid.illegal.aclname.iosxr"} 
                }
            },
            {
            "match": "permit ",
            "name": "markup.inserted.aclpermit.iosxr"
            },
            {
            "match": "deny ",
            "name": "invalid.illegal.acldeny.iosxr"
            },
            {
            "match": "object-group",
            "name": "support.function.acl.iosxr"
            }
        ]
    }
  },   
  "patterns": [
    {  "include": "#comments" },  
    {  "include": "#acl" },  
    {
      "match": "^\\s*no ",
      "name": "invalid.illegal.iosxr"
    },
    {
      "match": "crypto ",
      "name": "string.unquoted.iosxr"
    },
    {
      "match": "host",
      "name": "markup.list.iosxr"
    },
    {
      "match": "\\d+\\.\\d+\\.\\d+\\.\\d+(/\\d{1,2})?",
      "name": "constant.numeric.ipv4.iosxr"
    },
    {
      "match": "[0-9a-fA-F]{0,4}:([0-9a-fA-F]{0,4}:)+[0-9a-fA-F]{0,4}(/\\d{1,3})?",
      "name": "constant.numeric.ipv6.iosxr"
    },
    {
      "match": "\\bshutdown$",
      "name": "invalid.illegal.iosxr"
    },
    {
      "match": "(?<=\\n)(\\w|\\W)*(?=\\n)",
      "name": "invalid.illegal.inside.iosxr"
    },
    {
      "match": "(?<=\\n)[\\w\\W]*(?=\\n)",
      "name": "invalid.illegal.inside.iosxr"
    },
    {
      "match": "Configuration (\\d\\.)+\\d+[a-zA-Z]*",
      "name": "variable.version.iosxr"
    },
    {
      "match": "(?<!-)interface\\b",
      "name": "constant.language.interface.iosxr"
    },
    {
      "match": "\\bl2transport$",
      "name": "constant.character.escape.l2trans.iosxr"
    },
    {
      "match": "\\bMgmtEth.*", 
      "name": "variable.physinterface.iosxr" 
    }, 
    {
      "match": "\\bGigabitEthernet[0-9.\/-]+", 
      "name": "variable.physinterface.iosxr" 
    }, 
    {
      "match": "\\b(Ten|TwentyFive|Forty|Hundred|FourHundred)?GigE[0-9.\/-]+", 
      "name": "variable.physinterface.iosxr" 
    }, 
    {
      "match": "\\b(Loopback|Bundle-Ether|BVI)[0-9]+", 
      "name": "variable.logicalinterface.iosxr" 
    }, 
    {
      "match": "\\b(ipv(4|6) address|unnumbered|speed|(full-|half-)?duplex|cdp|encapsulation|lldp|bandwidth|mtu|lacp|bfd|channel-group)\\b",
      "name": "keyword.control.interface.iosxr"
    },
    {
      "match": "^(router|multicast-routing|mpls|dot1x|igmp|mld|segment-routing).*$",
      "name": "support.type.routing.iosxr"
    },
    {
      "match": "^(username|accounting|clock|hw-module|hostname|logging|cdp|ntp|lldp|netconf-yang|grpc|frequency|gnss-receiver|key|domain|call-home|line|telemetry|bfd|control-plane|vty-pool|aaa|fpd|taskgroup|usergroup|service|hw-platform|(snmp|radius|tacacs|telnet|ssh)(-server)?)\\b",
      "name": "keyword.control.system.iosxr"
    },
    {
      "match": "(?<!-)(vrf|evpn|l2vpn|ptp|dhcp|ethernet (cfm|oam|sla))(?!-)\\b",
      "name": "constant.character.escape.services.iosxr"
    },
    {
      "match": "(extcommunity|prefix)-set|route-policy|end-policy$|end-set\\b", 
      "name": "string.regexp.sets.iosxr"
    },
    {
      "match": "\\bipv(4|6) access-group\\b",
      "name": "string.regexp.interface.iosxr"
    },
    {
      "match": "\\bservice-policy\\b",
      "name": "string.regexp.interface.iosxr"
    },
    {
      "match": "\\b((class|policy)-map|end-(policy|class)-map)\\b",
      "name": "string.qosmap.iosxr"
    },
    {
      "match": "\\bend-class-map\\b",
      "name": "keyword.other.class-map.iosxr"
    },
    {
      "match": "^([a-zA-Z]).*$", 
      "name": "strong.emphasis.startsection.iosxr"
    },
    {
      "match": "^!$", 
      "name": "constant.regexp.endsection.iosxr"
    },
    {
      "match": "!!ad",
      "name": "markup.inserted" 
    }
  ]
}
